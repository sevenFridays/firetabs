var TabList = {
	onLoad: function(e) {
		// initialization code
		this.initialized = true;
	},

	onMenuItemCommand: function(e) {
		var wm = Components.classes["@mozilla.org/appshell/window-mediator;1"]  
                   .getService(Components.interfaces.nsIWindowMediator);  
		var winEnumerator = wm.getEnumerator("navigator:browser");  
		
		var tabList = [];
		while(winEnumerator.hasMoreElements()) {  
			var win = winEnumerator.getNext(); 
			var tabs = win.getBrowser().browsers;
			for(var i=0; i<tabs.length; i++) {
				var doc = tabs[i].contentWindow.document;
				tabList.push({title: doc.title, url: doc.location.href});
			}	
		}  
		var url = "about:blank";
		//url = "chrome://helloworld/content/test.html";
		var win = window.open(url);
		/* wait for window load, events onLoad can not be bind due to unknown reason */
		var timerId = setInterval(function() {	
			if(win.document && win.document.body) {
				clearInterval(timerId);
				win.document.body.innerHTML = TabList.buildHtml(tabList).toString();  
			}
		}, 100);
	},
	
	/* returns HtmlTag with tabs list inside */
	buildHtml: function (tabList) {
		var ulTag = new HtmlTag("ul");
		for(var i=0; i<tabList.length; i++) {
			var li = new HtmlTag("li").attr("id", "tab_" + i);
			li.appendInnerTag(new HtmlTag("a").text(tabList[i].title || "No title").attr("href", tabList[i].url).attr("target", "_blank"));
			li.appendInnerTag(new HtmlTag("span").text(" :: " + decodeURI(tabList[i].url)).attr("style", "color: gray"));
			li.appendInnerTag(new HtmlTag("span").text(" âœ˜ ")
				.attr("onClick", "document.getElementById('tab_" + i + "').parentNode.removeChild(document.getElementById('tab_" + i + "'))")
				.attr("style", "color: red; cursor: pointer; font-size: 1.3em;"));
			ulTag.appendInnerTag(li);
		}
		return ulTag;  		
	}	
		
};


function HtmlTag(tag) {
	this.tag = tag || "";
	this.txt = "";
	this.attributes = {};
	this.innerTags = [];
	return this;
}

HtmlTag.prototype.text = function(txt) {
	if(txt !== undefined) {
		this.txt = txt;
		return this;		
	}
	return this.txt;	
}

HtmlTag.prototype.attr = function(name, value) {
	if(value !== undefined) {
		this.attributes[name] = value;
		return this;		
	}
	return this.attributes[name];	
}

HtmlTag.prototype.appendInnerTag = function(innerTag) {
	this.innerTags.push(innerTag);
	return this;
}

HtmlTag.prototype.toString = function() {
	var tagContentsStr = this.txt;
	var tagPropsStr = "";
	for(var i=0; i<this.innerTags.length; i++) {
		tagContentsStr += this.innerTags[i].toString();		
	}
	for(var name in this.attributes) {
		tagPropsStr += " " + name + "=" + "\"" + this.attributes[name] + "\"";		
	}
	return "<" + this.tag + tagPropsStr + ">" + tagContentsStr + "</" + this.tag + ">";
}



/*
function objListToHtmlList(list) {

}


function alertDescr(obj) {
	var descr = describe(obj, "\n");
	alert("methods:\n" + descr.methods);
	alert("properties:\n" + descr.properties);
}

function describe(obj, sep) {
	var properties="";
	var methods=""

	for(el in obj) {
		if(typeof(el) == "function") {
			methods +=  el + sep;
		} else {
			properties +=  el + sep;
		}
	}
	return {methods: methods, properties: properties};
}


window.addEventListener("load", function(e) { HelloWorld.onLoad(e); }, false); 


*/
